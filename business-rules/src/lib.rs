use serde::{Deserialize, Serialize};
use strum::EnumIter;

// TODO: make this use tags/identifiers that can be generated by a user instead
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Hash, Clone)]
pub struct Purchase {
	pub title:       String,
	pub physicality: Physicality,
	pub category:    Category
}

#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Hash, Clone)]
pub enum Physicality {
	Physical,
	Nonphysical
}
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Hash, Clone, EnumIter)] // #[serde(rename_all = "camelCase")]
pub enum Category {
	MembershipUpgrade,
	Membership,
	Book,
	Video
}
impl Purchase {
	pub fn get_processing_steps(&self) -> Vec<&str> {
		let mut steps: Vec<&str> = vec![];

		if self.physicality == Physicality::Physical {
			steps.push(GENERATE_SLIP);
		}
		if self.category == Category::Book {
			steps.push(DUPLICATE_SLIP);
		}
		if self.category == Category::Membership {
			steps.push(ACTIVATE_MEMBERSHIP);
		}
		if self.category == Category::MembershipUpgrade {
			steps.push(APPLY_UPGRADE);
		}
		if matches!(
			self.category,
			Category::Membership | Category::MembershipUpgrade
		) {
			steps.push(EMAIL_OWNER);
		}
		if self.category == Category::Video && self.title == "Learning to Ski" {
			steps.push(ADD_FIRST_AID_VIDEO);
		}
		if self.physicality == Physicality::Physical || self.category == Category::Book {
			steps.push(GENERATE_COMMISION);
		}

		steps
	}
}

const GENERATE_SLIP: &str = "generate a packing slip for shipping";
const DUPLICATE_SLIP: &str = "create a duplicate packing slip for the royalty department";
const ACTIVATE_MEMBERSHIP: &str = "activate that membership";
const APPLY_UPGRADE: &str = "apply the upgrade";
const EMAIL_OWNER: &str = "e-mail the owner and inform them of the activation/upgrade";
const ADD_FIRST_AID_VIDEO: &str =
	"add a free “First Aid” video to the packing slip (the result of a court decision in 1997)";
const GENERATE_COMMISION: &str = "generate a commission payment to the agent";

#[cfg(test)]
mod tests {
	use super::*;

	#[test]
	fn book() {
		let expectation = vec![GENERATE_SLIP, DUPLICATE_SLIP, GENERATE_COMMISION];
		let purchase = Purchase {
			title:       "1984".into(),
			physicality: Physicality::Physical,
			category:    Category::Book
		};
		assert_eq!(expectation, purchase.get_processing_steps())
	}
	#[test]
	fn ski_mp4() {
		let expectation = vec![ADD_FIRST_AID_VIDEO];
		let purchase = Purchase {
			title:       "Learning to Ski".into(),
			physicality: Physicality::Nonphysical,
			category:    Category::Video
		};
		assert_eq!(expectation, purchase.get_processing_steps())
	}
	#[test]
	fn gym_membership() {
		let expectation = vec![ACTIVATE_MEMBERSHIP, EMAIL_OWNER];
		let purchase = Purchase {
			title:       "Fitness World 3 month discount trial".into(),
			physicality: Physicality::Nonphysical,
			category:    Category::Membership
		};
		assert_eq!(expectation, purchase.get_processing_steps())
	}
}
